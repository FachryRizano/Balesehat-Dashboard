
# FROM node:latest AS base

# # 1. Install dependencies only when needed
# FROM base AS deps
# # Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
# # RUN apt-get update && apt-get install -y libc6-compat
# RUN apt-get update && apt-get install -y libc6


# WORKDIR /app

# # Install dependencies based on the preferred package manager
# COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./
# RUN \
#   if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
#   elif [ -f package-lock.json ]; then npm install --frozen-lockfile; \
#   elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i; \
#   else echo "Lockfile not found." && exit 1; \
#   fi

# # 2. Rebuild the source code only when needed
# FROM base AS builder
# COPY package.json .
# COPY package-lock.json .
# WORKDIR /app
# COPY --from=deps /app/node_modules ./node_modules
# COPY . .
# # This will do the trick, use the corresponding env file for each environment.
# COPY .env.development .env.production
# RUN npm run build

# # 3. Production image, copy all the files and run next
# FROM base AS runner
# COPY --from=builder /app/package.json ./package.json
# WORKDIR /app

# ENV NODE_ENV=production

# RUN addgroup --gid 1001 nodejs && \
#     adduser --uid 1001 --ingroup nodejs --shell /bin/sh --disabled-password --no-create-home nextjs

# # RUN addgroup -g 1001 -S nodejs
# # RUN adduser -S nextjs -u 1001

# COPY --from=builder /app/public ./public

# # Automatically leverage output traces to reduce image size
# # https://nextjs.org/docs/advanced-features/output-file-tracing
# COPY --from=builder /app/.next ./.next
# # COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
# # COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static


# USER nextjs

# EXPOSE 3000

# ENV PORT 3000
# ENV HOSTNAME localhost

# CMD ["npm", "run", "start"]
FROM node:latest AS base

# 1. Install dependencies only when needed
FROM base AS deps
WORKDIR /app
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./
RUN if [ -f yarn.lock ]; then \
      yarn --frozen-lockfile; \
    elif [ -f package-lock.json ]; then \
      npm install --frozen-lockfile; \
    elif [ -f pnpm-lock.yaml ]; then \
      yarn global add pnpm && pnpm i; \
    else \
      echo "Lockfile not found." && exit 1; \
    fi

# 2. Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .
COPY .env.development .env.production
RUN npm run build

# 3. Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app
ENV NODE_ENV=production

RUN addgroup --gid 1001 nodejs && \
    adduser --uid 1001 --ingroup nodejs --shell /bin/sh --disabled-password --no-create-home nextjs
USER nextjs

COPY --from=builder /app/public ./public
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json

EXPOSE 3000
ENV PORT 3000
ENV HOSTNAME localhost

CMD ["npm", "run", "start"]
